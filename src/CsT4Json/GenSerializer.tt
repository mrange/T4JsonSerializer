#define UTF8_COMPARE
<#@ assembly  name      = "System.Core" #>
<#@ import    namespace = "System.Linq" #>
<#
  var model = new []
  {
    C(  "Person"
      , ("int"                ,     "Id"        )
      , ("string"             ,     "FirstName" )
      , ("string"             ,     "LastName"  )
    ),                      
    C(  "Marriage"
      , ("Person"             ,     "Husband"   )
      , ("Person"             ,     "Wife"      )
      , ("string"             ,     "Married"   )
    ),
    C(  "User"
      , ("int"                ,     "Id"        )
      , ("string"             ,     "FirstName" )
      , ("string"             ,     "LastName"  )
      , ("List<GeoLocation>"  ,     "LastSeenAt")
    ),
    C(  "GeoLocation"
      , ("double" ,     "Lo"        )
      , ("double" ,     "La"        )
      , ("string" ,     "TimeStamp" )
    ),
  };
#>

<#
  var knownTypes = model
    .Select(c => c.Name)
    .Concat(new [] {"bool", "double", "string", "int"})
    .ToArray()
    ;
  var listTypes = knownTypes
    .Select(c => $"List<{c}>")
    .ToArray()
    ;
  var allTypes = knownTypes
    .Concat(listTypes)
    .ToArray()
    ;
#>

namespace CsT4Json
{
  using System;
  using System.Buffers;
  using System.Collections.Generic;
  using System.Text;
  using System.Text.Json;

<# foreach (var classDef in model) { #>
  // --------------------------------------------------------------------------
  partial record <#=classDef.Name#>
  {
<# foreach (var (ptype, pname) in classDef.Properties) { #>
    public <#=RightPad(ptype, 20)#> <#=RightPad(pname, 30)#> { get; set; }
<# } #>
  }
  // --------------------------------------------------------------------------

<# } #>

  static partial class T4JsonSerializer
  {
    static readonly Encoding _enc = new UTF8Encoding(false);

<# foreach (var classDef in model) { #>

<# foreach (var (ptype, pname) in classDef.Properties) { #>
    static readonly byte[] _utf8_<#=classDef.Name#>_<#=RightPad(pname, 20)#> = _enc.GetBytes("<#=pname#>");
<# } #>

    public static DeserializeResult Deserialize(this ref Utf8JsonReader r, out <#=classDef.Name#> v)
    {
      if (r.TokenType == JsonTokenType.Null)
      {
        v = null;
        return r.Advance();
      }

      v = new <#=classDef.Name#>();

      if (r.TokenType != JsonTokenType.StartObject)
      {
        return _bad;
      }

      if (r.Advance() != DeserializeResult.Good)
      {
        return _bad;
      }

      while(r.TokenType == JsonTokenType.PropertyName)
      {
#if UTF8_COMPARE
<# foreach (var (ptype, pname) in classDef.Properties) { #>
        if (r.ValueTextEquals(_utf8_<#=classDef.Name#>_<#=pname#>))
        {
          if (r.Advance() != DeserializeResult.Good)
          {
            return _bad;
          }

          if (r.Deserialize(out <#=ptype#> vv) != DeserializeResult.Good)
          {
            return _bad;
          }

          v.<#=pname#> = vv;

          continue;
        }

<# } #>
#else
        var name = r.GetString();
        if (r.Advance() != DeserializeResult.Good)
        {
          return _bad;
        }

        switch (name)
        {
<# foreach (var (ptype, pname) in classDef.Properties) { #>
        case "<#=pname#>":
          if (r.Deserialize(out <#=ptype#> vv) != DeserializeResult.Good)
          {
            return _bad;
          }
          v.<#=pname#> = vv;
          break;

<# } #>
        default:
          return _bad;
        }
#endif
      }

      if (r.TokenType != JsonTokenType.EndObject)
      {
        return _bad;
      }

      return r.Advance();
    }

    public static void Serialize(this Utf8JsonWriter w, <#=classDef.Name#> v)
    {
      if (v is null)
      {
        w.WriteNullValue();
        return;
      }

      w.WriteStartObject();

<# foreach (var (ptype, pname) in classDef.Properties) { #>
      w.WritePropertyName(_utf8_<#=classDef.Name#>_<#=pname#>);
      w.Serialize(v.<#=pname#>);

<# } #>

      w.WriteEndObject();
    }

<# } #>

<# foreach (var knownType in knownTypes) { #>
    public static DeserializeResult Deserialize(this ref Utf8JsonReader r, out List<<#=knownType#>> vs)
    {
      if (r.TokenType == JsonTokenType.Null)
      {
        vs = null;
        return r.Advance();
      }

      vs = new List<<#=knownType#>>(16);

      if (r.TokenType != JsonTokenType.StartArray)
      {
        return _bad;
      }

      if (r.Advance() != DeserializeResult.Good)
      {
        return _bad;
      }

      while(r.TokenType != JsonTokenType.EndArray)
      {
        if (r.Deserialize(out <#=knownType#> vv) != DeserializeResult.Good)
        {
          return _bad;
        }

        vs.Add(vv);
      }

      return r.Advance();
    }

    public static void Serialize(this Utf8JsonWriter w, List<<#=knownType#>> vs)
    {
      if (vs is null)
      {
        w.WriteNullValue();
        return;
      }

      w.WriteStartArray();

      var c = vs.Count;
      for(int i = 0; i < c; ++i)
      {
        w.Serialize(vs[i]);
      }

      w.WriteEndArray();
    }

<# } #>

<# foreach (var allType in allTypes) { #>
    public static void Deserialize(this byte[] bs, out <#=allType#> v)
    {
      var inp = new ReadOnlySpan<byte>(bs);
//      var inp = new ReadOnlySequence<byte>(bs);
      var state = new JsonReaderState(_opts);
      var r = new Utf8JsonReader(inp, true, state);
      if (!r.Read())
      {
        r.RaiseInvalidInput();
      }

      var rr = r.Deserialize(out v);
      switch(rr)
      {
      case DeserializeResult.Good:
        r.RaiseInvalidInput();
        break;
      case DeserializeResult.GoodEOS:
        break;
      case DeserializeResult.Bad:
        r.RaiseInvalidInput();
        break;
      }
    }

    public static byte[] Serialize(this <#=allType#> v, bool indented = false)
    {
      var opts = new JsonWriterOptions()
      {
        Indented        = indented  ,
        SkipValidation  = true      ,
      };

      var mb = _tlsBuffer.Value;
      mb.Clear ();

      using(var w = new Utf8JsonWriter(mb, opts))
      {
        w.Serialize(v);
      }

      return mb.WrittenSpan.ToArray();
    }
<# } #>

  }
}
<#+

static string RightPad(string s, int c)
{
  s = s ?? "";
  if (s.Length >= c) return s;

  return s + new string(' ', c - s.Length);
}

class ClassModel
{
  public readonly string              Name       ;
  public readonly (string, string)[]  Properties ;

  public ClassModel(string name, params (string, string)[] properties)
  {
    Name        = name        ?? "<NONAME>";
    Properties  = properties  ?? Array.Empty<(string, string)>();
  }
}

static ClassModel C(string name, params (string, string)[] properties)
{
  return new ClassModel(name, properties);
}

#>